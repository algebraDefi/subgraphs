enum Period {
  hourly
  fourhour
  daily
  weekly
  total
}

enum PositionStatus {
  OPEN
  CLOSED
  LIQUIDATED
}

type Protocol @entity {
  id: ID!
  openInterest: BigInt!
  totalVolume: BigInt!
  totalFee: BigInt!
  totalValue: BigInt!
  poolValue: BigInt!
  pairLiquidity: BigInt!
  totalUsers: Int!
  daoFeeRatio: BigInt!
  lastUpdatedBlock: BigInt!
}

type ProtocolStat @entity {
  id: ID!
  totalValueLocked: BigDecimal!
  llpValue: BigDecimal!
  pairLiquidity: BigDecimal!
  lvlCirculatingSupply: BigDecimal!
  period: Period!
  timestamp: Int!
}

type Tranche @entity {
  id: ID!
  tranche: Bytes!
  trancheValue: BigInt!
  llpSupply: BigInt!
  llpPrice: BigInt!
  totalFeeValue: BigInt!
}

type TrancheStat @entity {
  id: ID!
  tranche: Bytes!
  trancheValue: BigDecimal!
  llpSupply: BigDecimal!
  llpPrice: BigDecimal!
  totalFeeValue: BigDecimal!
  period: Period!
  timestamp: Int!
}

type TokenDistributionStat @entity {
  id: ID!
  token: Bytes!
  tranche: Bytes!
  value: BigDecimal!
  period: Period!
  timestamp: Int!
}

type VolumeStat @entity {
  id: ID!
  trading: BigDecimal!
  swap: BigDecimal!
  total: BigDecimal!
  cumulative: BigDecimal!
  period: Period!
  timestamp: Int!
}

type FeeStat @entity {
  id: ID!
  trading: BigDecimal!
  swap: BigDecimal!
  mint: BigDecimal!
  burn: BigDecimal!
  liquidate: BigDecimal!
  cumulative: BigDecimal!
  total: BigDecimal!
  period: Period!
  timestamp: Int!
}

type TradingStat @entity {
  id: ID!
  longOpenInterest: BigDecimal!
  shortOpenInterest: BigDecimal!
  traderPnl: BigDecimal!
  cumulativeTraderPnl: BigDecimal!
  traderFee: BigDecimal!
  cumulativeTraderFee: BigDecimal!
  daoFee: BigDecimal!
  cumulativeDaoFee: BigDecimal!
  period: Period!
  timestamp: Int!
}

type TradingPairStat @entity {
  id: ID!
  indexToken: Bytes!
  volumeUsd: BigInt!
  volume: BigInt!
  period: Period!
  timestamp: Int!
}

# Loyalty

type LoyaltyHistory @entity {
  id: ID!
  owner: Bytes!
  indexToken: Bytes
  collateralToken: Bytes
  side: Int
  sizeChange: BigInt
  status: PositionStatus
  timestamp: BigInt
  amount: BigInt
  price: BigInt
  tx: Bytes!
  #Swap
  isSwap: Boolean!
  tokenIn: Bytes
  tokenOut: Bytes
  amountIn: BigInt
  amountOut: BigInt
}

type LoyaltyRedeemHistory @entity {
  id: ID!
  owner: Bytes!
  amount: BigInt!
  tx: Bytes!
  timestamp: BigInt!
}

# Risk factor

type RiskFactor @entity {
  id: ID!
  token: Bytes!
  totalRiskFactor: BigInt!
  riskFactors: [BigInt!]!
}

# Price
type PriceStat @entity {
  id: ID!
  token: Bytes!
  value: BigInt!
  period: Period!
  timestamp: Int!
}
